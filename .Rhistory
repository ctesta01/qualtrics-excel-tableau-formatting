q()
install.packages("rjson")
library("rjson")
json_file <- "/Users/ctesta/VC/qsfparsing/surveyhelper/Sample_Survey.qsf"
json_data <- fromJSON(paste(readlines(json_file), collapse=""))
json_data <- fromJSON(file=json_file)
csv_data = read.csv("/Users/ctesta/VC/qsfparsing/surveyhelper/Sample_Survey.csv")
View(csv_data)
View(csv_data)
getwd()
cd("/Users/ctesta/VC")
summary(json_data)
library("rjson")
json_file <- "/Users/ctesta/VC/qsfparsing/surveyhelper/Sample_Survey.qsf"
json_data <- fromJSON(file=json_file)
csv_data = read.csv("/Users/ctesta/VC/qsfparsing/surveyhelper/Sample_Survey.csv")
csv_data
dim(csv_data)
names(csv_data)
head(csv_data)
csv_data[,1]
csv_data[1,]
dim(json_data)
json_data[1]
csv_data$V1
csv_data$Q1
csv_data[1]
class(csv_data)
n = c(1,2,3)
n
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n,s,b)
View(df)
View(df)
View(csv_data)
d <- data.frame(alpha=1:3, beta=4:6, gamma=7:9)
View(d)
View(d)
names(d)
names(d)[names(d)]
names(d)[names(d)=="beta"]
names(d)[names(d)==*]
names(d)[names(d)==]
names(d)[names(d)]
names(d)[names(d)=="beta"]
names(d)
names(d)[names(d)=="beta"]
names(d)[names(d)=="beta"] <- "twp"
names(d)[names(d)=="beta"] <- "two"
names(d)[names(d)=="twp"] <- "two"
test = "long_string_here"
names(d)[names(d)=="two"] <- test
list.packages
installed.packages()
remove.packages(rjson)
remove.packages(pkgs = rjson)
?remove.packages()
remove.packages(rjson)
json_data = fromJSON(file=/Users/ctesta/School/OIRE/PreviewGenerationProject/week1/testing/One_Multiple_Choice.qsf)
json_data = fromJSON(file='/Users/ctesta/School/OIRE/PreviewGenerationProject/week1/testing/One_Multiple_Choice.qsf')
library("rjson")
json_data = fromJSON(file='/Users/ctesta/School/OIRE/PreviewGenerationProject/week1/testing/One_Multiple_Choice.qsf')
json_data.keys()
json_data$SurveyEntry$SurveyID
json_data$SurveyElements
json_data$SurveyElements[1]
json_data$SurveyElements[0]
json_data$SurveyElements[2]
json_data$SurveyElements[2][1]
json_data$SurveyElements[2][1]
json_data$SurveyElements[2][2]
json_data$SurveyElements[2][3]
json_data$SurveyElements[2][[1]]
typeof(json_data$SurveyElements[2])
json_data$SurveyElements[2]["PrimaryAttribute"]
json_data$SurveyElements[2]["$PrimaryAttribute"]
json_data$SurveyElements[2][$PrimaryAttribute]
json_data$SurveyElements[2]$PrimaryAttribute
json_data$SurveyElements[2]
json_data$SurveyElements
json_data$SurveyElements[1]
json_data$SurveyElements[1]
json_data$SurveyElements[1][1]
json_data$SurveyElements[1][1][1]
json_data$SurveyElements[1][1][1][1]
json_data$SurveyElements[1][1][1][1][1]
json_data$SurveyElements[1]$Payload
json_data$SurveyElements[1]$Payload[1]
json_data$SurveyElements[1]$SurveyID
json_data$SurveyElements[1]["SurveyID"]
json_data$SurveyElements[1]["$SurveyID"]
json_data$SurveyElements[1][1]
json_data$SurveyElements[1][[1]]
json_data$SurveyElements[1]
json_data$SurveyElements[1]
json_data$SurveyElements[1][1]
json_data$SurveyElements[1][[1]]
json_data$SurveyElements[1][[1]]$SurveyID
json_data$SurveyElements[1][[2]]$SurveyID
json_data$SurveyElements[1][[1]]
json_data$SurveyElements[1][[0]]
json_data$SurveyElements[1][[1]]
json_data$SurveyElements[1][[1]]$Payload
json_data$SurveyElements[1]
json_data$SurveyElements
json_data$SurveyEntry
json_data$SurveyEntry[1]
json_data$SurveyEntry[2]
json_data$SurveyEntry[3]
json_data$SurveyEntry$SurveyLanguage
json_data$SurveyEntry
json_data$SurveyElements
dickcounts <- read.csv("~/Dropbox/Documents/python_fun/dickcounts.json", header=FALSE)
View(dickcounts)
dickcounts <- read.csv("~/Dropbox/Documents/python_fun/dickcounts.json", header=FALSE)
View(dickcounts)
dickcounts[1]
typeof(dickcounts[1])
dickcounts[1][1]
dickcounts[1][2]
dickcounts[3][]
dickcounts[1]
typeof(dickcounts[1])
str(dickcounts[1])
dickcounts[1] == "[1"
library("rjson")
library("json")
dickcounts <= fromJSON(source=file.choose())
dickcounts = fromJSON(source=file.choose())
dickcounts = fromJSON(file=file.choose())
dickcounts[1]
dickcounts[2]
library(plotly)
install.packages(plotly)
install.packages("plotly")
library(plotly)
p <- plot_ly(
x = c(1:1000)
)
p <- plot_ly(
x = c(1:1000),
y = dickcounts,
type = "bar",
)
c(1:1000)
p <- plot_ly(
x = c(1:1000),
y = dickcounts,
type = "bar",
)
p
p <- plot_ly(
x = c(1:10000),
y = dickcounts,
type = "bar",
)
p
dickcounts = fromJSON(file=file.choose())
p <- plot_ly(
x = c(1:100000),
y = dickcounts,
type = "bar",
)
p
p <- plot_ly(
x = c(1:100000),
y = dickcounts,
type = "scatter",
)
p
p <- plot_ly(
x = c(1:100000),
y = dickcounts,
type = "scatter",
)
p <- plot_ly(
x = c(1:100000),
y = dickcounts,
type = "scatter",
mode = "markers",
color = carat,
size = carat
)
p
p <- plot_ly(
x = c(1:100000),
y = dickcounts,
type = "scatter",
mode = "markers",
)
p <- plot_ly(
x = c(1:100000),
y = dickcounts,
type = "scatter",
mode = "markers",
)
p
layout(p, xaxis = list(type = "log"),
yaxis = list(type = "log"))
p
p <- plot_ly(
x = c(1:100000),
y = dickcounts,
type = "scatter",
mode = "markers",
)
layout(p,
yaxis = list(type = "log"))
file.choose()
source("code/header.R")
setwd("~/School/OIRE/excel-tableau-formatting/")
source("code/header.R")
source("code/link_responses_to_questions.R")
source("code/questions.R")
source("code/dataexporttag_uniqueness_check.R")
source("code/delete_trash_questions.R")
source("code/link_responses_to_questions.R")
source("code/questions_into_blocks.R")
source("code/cleaning_blocks.R")
source("code/is_question_functions.R")
source("code/question_dictionary.R")
source("code/lean_responses.R")
source("code/panel_columns.R")
base_panel_data_from_csv(responses)
base_panel_data_from_csv(responses, c("IPAddress", "StartDate"))
base_panel_data_from_csv(responses, c("ResponseID", IPAddress", "StartDate"))
base_panel_data_from_csv(responses, c("ResponseID", IPAddress", "StartDate"))
base_panel_data_from_csv(responses, c("ResponseID", "IPAddress", "StartDate"))
base_panel_data_from_csv(responses, c("ResponseID", "IPAddress", "StartDate", "ResponseID"))
base_panel_data_from_csv(responses, c("ResponseID", c("ResponseID", "IPAddress", "StartDate"))
)
base_panel_data_from_csv(responses, c("ResponseID", "IPAddress", "StartDate"))
likely_panel_columns
questionlist <- likely_panel_columns
all?
?all
questionlist %%in%% likely_panel_columns
questionlist %in% likely_panel_columns
all(questionlist %in% likely_panel_columns)
typeof(questionlist)
?typeof
mode(questionlsit)
mode(questionlist)
typeof(questionlist[[1]])
questionlist
View(responses)
print(likely_panel_columns)
while (all(questionlist %in% likely_panel_columns) == FALSE) {
questionlist <- readline("Please enter a list with entries from the original
panel columns listed above of what panel columns you'd like carried
over into the output data set")
if (all(questionlist %in% likely_panel_columns)) { break }
}
questionlist <- 0
print(likely_panel_columns)
while (all(questionlist %in% likely_panel_columns) == FALSE) {
questionlist <- readline("Please enter a list with entries from the original
panel columns listed above of what panel columns you'd like carried
over into the output data set")
if (all(questionlist %in% likely_panel_columns)) { break }
}
dummy <- readline("Test:")
dummy
base_panel_data <- base_panel_data_from_csv(responses, c("ResponseID", "IPAddress", "StartDate"))
View(base_panel_data)
?paste0
orig_questiontext <- paste0("Orig: ", questionname, ": ", questiontext)
questionname <- "Test"
orig_questiontext <- paste0("Orig: ", questionname, ": ", questiontext)
orig_questiontext <- paste0("Orig: ", questionname, ": ", "test")
orig_questiontext
View(lean_responses)
question_panel_data <- all_panel_questions(lean_responses, c("Q5", "Q15_3"))
question_panel_data
source("code/panel_columns.R")
source("code/panel_columns.R")
question_panel_data <- all_panel_questions(lean_responses, c("Q5", "Q15_3"))
question_panel_data
merge(x = base_panel_data, y = question_panel_data, by = "ResponseID", all = TRUE)
final_panel_data <- merge(x = base_panel_data, y = question_panel_data, by = "ResponseID", all = TRUE)
lean_responses <- merge(x = lean_responses, y = final_panel_data, by = "ResponseID", all = TRUE)
base_panel_data_from_csv(responses, c())
panel_merging <- function(df, base_panel_columns, question_panel_columns) {
base_panel_data <- base_panel_data_from_csv(df, base_panel_columns)
question_panel_data <- all_panel_questions(df, question_panel_columns)
final_panel_data <- merge(x = base_panel_data, y = question_panel_data, by = "ResponseID", all = TRUE)
lean_responses <- merge(x = lean_responses, y = final_panel_data, by = "ResponseID", all = TRUE)
}
panel_merging(lean_responses, c("ResponseID", "IPAddress"), c("Q5", "Q4_1"))
lean_responses <- panel_merging(lean_responses, c("ResponseID", "IPAddress"), c("Q5", "Q4_1"))
